version: '3.8'

services:
  # Database
  postgres:
    image: postgres:15-alpine
    container_name: xdate-postgres
    environment:
      POSTGRES_DB: xdate
      POSTGRES_USER: xdate_user
      POSTGRES_PASSWORD: xdate_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/db/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - xdate-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U xdate_user -d xdate"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Cache
  redis:
    image: redis:7-alpine
    container_name: xdate-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - xdate-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: xdate-backend
    environment:
      NODE_ENV: development
      DATABASE_URL: postgresql://xdate_user:xdate_password@postgres:5432/xdate
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: xdate
      DB_USER: xdate_user
      DB_PASSWORD: xdate_password
      REDIS_URL: redis://redis:6379
      REDIS_HOST: redis
      REDIS_PORT: 6379
      PORT: 3001
    ports:
      - "3001:3001"
    volumes:
      - ./backend:/app
      - /app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - xdate-network
    command: npm run dev

  # Frontend Web App
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: xdate-frontend
    environment:
      REACT_APP_API_URL: http://localhost:3001
      REACT_APP_X_CLIENT_ID: ${X_CLIENT_ID}
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - xdate-network
    command: npm start

  # Mobile Development Server (Expo)
  mobile:
    build:
      context: ./mobile
      dockerfile: Dockerfile.dev
    container_name: xdate-mobile
    environment:
      EXPO_DEVTOOLS_LISTEN_ADDRESS: 0.0.0.0
    ports:
      - "19000:19000"
      - "19001:19001"
      - "19002:19002"
    volumes:
      - ./mobile:/app
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - xdate-network
    command: npm start

  # Nginx Reverse Proxy (for production-like setup)
  nginx:
    image: nginx:alpine
    container_name: xdate-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
    networks:
      - xdate-network
    profiles:
      - production

  # Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: xdate-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - xdate-network
    profiles:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    container_name: xdate-grafana
    ports:
      - "3002:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - xdate-network
    profiles:
      - monitoring

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  xdate-network:
    driver: bridge 